/* -*- buffer-read-only: t -*- vi: set ro: */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.21
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

/* Implementation : GUILE */

extern "C" {

extern void
SWIG_init (void)
;

}

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif

/*************************************************************** -*- c -*-
 * guile/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Guile_TypeRegister
#define SWIG_TypeCheck       SWIG_Guile_TypeCheck
#define SWIG_TypeCast        SWIG_Guile_TypeCast
#define SWIG_TypeDynamicCast SWIG_Guile_TypeDynamicCast
#define SWIG_TypeName        SWIG_Guile_TypeName
#define SWIG_TypeQuery       SWIG_Guile_TypeQuery
#define SWIG_TypeClientData  SWIG_Guile_TypeClientData
#define SWIG_PackData        SWIG_Guile_PackData 
#define SWIG_UnpackData      SWIG_Guile_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/* -*- c -*-
 * -----------------------------------------------------------------------
 * swig_lib/guile/guile_scm_run.swg
 *
 * Author: John Lenz <jelenz@wisc.edu>
 * ----------------------------------------------------------------------- */

#include <libguile.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef SCM (*swig_guile_proc)();
typedef SCM (*guile_destructor)(SCM);

typedef struct swig_guile_clientdata {
  guile_destructor destroy;
  SCM goops_class;
} swig_guile_clientdata;

#define SWIG_scm2str(s) \
  SWIG_Guile_scm2newstr(s, NULL)
#define SWIG_malloc(size) \
  SCM_MUST_MALLOC(size)
#define SWIG_free(mem) \
  scm_must_free(mem)
#define SWIG_ConvertPtr(s, result, type, flags) \
  SWIG_Guile_ConvertPtr(s, result, type, flags)
#define SWIG_MustGetPtr(s, type, argnum, flags) \
  SWIG_Guile_MustGetPtr(s, type, argnum, flags, FUNC_NAME)
#define SWIG_NewPointerObj(ptr, type, owner) \
  SWIG_Guile_NewPointerObj((void*)ptr, type, owner)
#define SWIG_PropagateClientData(type) \
  SWIG_Guile_PropagateClientData(type)
#define SWIG_contract_assert(expr, msg)				\
  if (!(expr))							\
    scm_error(scm_str2symbol("swig-contract-assertion-failed"),	\
	      (char *) FUNC_NAME, (char *) msg,			\
	      SCM_EOL, SCM_BOOL_F); else
  
#ifdef SWIG_NOINCLUDE

/* Interface helper function */
SWIGIMPORT(char *) SWIG_Guile_scm2newstr(SCM str, size_t *len);

/* Register SWIG smobs with Guile.  */
SWIGIMPORT(void) SWIG_Guile_Init();
/* Get a pointer value from a smob.  If there is a type-mismatch,
   return nonzero; on success, return 0.  */
SWIGIMPORT(int) SWIG_Guile_ConvertPtr(SCM s, void **result, swig_type_info *type, int flags);
/* Get a pointer value from a smob.  If there is a type-mismatch,
   signal a wrong-type-arg error for the given argument number. */
SWIGIMPORT(void *) SWIG_Guile_MustGetPtr(SCM s, swig_type_info *type, int argnum, int flags, const char *func_name);
/* Make a smob from a pointer and typeinfo.  */
SWIGIMPORT(SCM) SWIG_Guile_NewPointerObj(void *ptr, swig_type_info *type, int owner);
/* Get arguments from an argument list */
SWIGIMPORT(int) SWIG_Guile_GetArgs(SCM *dest, SCM rest, int reqargs, int optargs, const char *procname);
/* Propagate client data to equivalent types */
SWIGIMPORT(void) 
SWIG_Guile_PropagateClientData(swig_type_info *type);
/* Make a pointer object non-collectable */
SWIGIMPORT(void)
SWIG_Guile_MarkPointerNoncollectable(SCM s);
/* Mark a pointer object destroyed */
SWIGIMPORT(void)
SWIG_Guile_MarkPointerDestroyed(SCM s);
       
#else

SWIGRUNTIME(char *) 
SWIG_Guile_scm2newstr(SCM str, size_t *len) {
#define FUNC_NAME "SWIG_Guile_scm2newstr"
  char *ret;
  size_t l;

  l = SCM_STRING_LENGTH(str);
  ret = (char *) SWIG_malloc( (l + 1) * sizeof(char));
  if (!ret) return NULL;

  memcpy(ret, SCM_STRING_CHARS(str), l);
  ret[l] = '\0';
  if (len) *len = l;
  return ret;
#undef FUNC_NAME
}

static scm_t_bits swig_tag = 0;
static scm_t_bits swig_collectable_tag = 0;
static scm_t_bits swig_destroyed_tag = 0;
static SCM swig_make_func = SCM_EOL;
static SCM swig_keyword = SCM_EOL;
static SCM swig_symbol = SCM_EOL;

#define SWIG_Guile_GetSmob(x) \
  ( SCM_NNULLP(x) && SCM_INSTANCEP(x) && SCM_NFALSEP(scm_slot_exists_p(x, swig_symbol)) \
      ? scm_slot_ref(x, swig_symbol) : (x) )

SWIGRUNTIME(SCM)
SWIG_Guile_NewPointerObj(void *ptr, swig_type_info *type, int owner)
{
  if (ptr == NULL)
    return SCM_EOL;
  else {
    SCM smob;
    swig_guile_clientdata *cdata = (swig_guile_clientdata *) type->clientdata;
    if (owner)
      SCM_NEWSMOB2(smob, swig_collectable_tag, ptr, (void *) type);
    else
      SCM_NEWSMOB2(smob, swig_tag, ptr, (void *) type);

    if (!cdata || SCM_NULLP(cdata->goops_class) || swig_make_func == SCM_EOL ) {
      return smob;
    } else {
      /* the scm_make() C function only handles the creation of gf,
	 methods and classes (no instances) the (make ...) function is
	 later redefined in goops.scm.  So we need to call that
	 Scheme function. */
      return scm_apply(swig_make_func,
		       scm_list_3(cdata->goops_class,
				  swig_keyword,
				  smob),
		       SCM_EOL);
    }
  }
}

/* Return 0 if successful. */
SWIGRUNTIME(int)
SWIG_Guile_ConvertPtr(SCM s, void **result, swig_type_info *type, int flags)
{
  swig_type_info *cast;
  swig_type_info *from;
  SCM smob = SWIG_Guile_GetSmob(s);

  if (SCM_NULLP(smob)) {
    *result = NULL;
    return 0;
  } else if (SCM_SMOB_PREDICATE(swig_tag, smob) || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)) {
    /* we do not accept smobs representing destroyed pointers */
    from = (swig_type_info *) SCM_CELL_WORD_2(smob);
    if (!from) return 1;
    if (type) {
      cast = SWIG_TypeCheck((char*)from->name, type);
      if (cast) {
        *result = SWIG_TypeCast(cast, (void *) SCM_CELL_WORD_1(smob));
        return 0;
      } else {
        return 1;
      }
    } else {
      *result = (void *) SCM_CELL_WORD_1(smob);
      return 0;
    }
  }
  return 1;
}

SWIGRUNTIME(void *)
SWIG_Guile_MustGetPtr (SCM s, swig_type_info *type,
		       int argnum, int flags, const char *func_name)
{
  void *result;
  if (SWIG_Guile_ConvertPtr(s, &result, type, flags)) {
    /* type mismatch */
    scm_wrong_type_arg((char *) func_name, argnum, s);
  }
  return result;
}

/* Mark a pointer object non-collectable */
SWIGRUNTIME(void)
SWIG_Guile_MarkPointerNoncollectable(SCM s)
{
  SCM smob = SWIG_Guile_GetSmob(s);
  if (!SCM_NULLP(smob)) {
    if (SCM_SMOB_PREDICATE(swig_tag, smob) || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)) {
      SCM_SET_CELL_TYPE(smob, swig_tag);
    }
    else scm_wrong_type_arg(NULL, 0, s);
  }
}

/* Mark a pointer object destroyed */
SWIGIMPORT(void)
SWIG_Guile_MarkPointerDestroyed(SCM s)
{
  SCM smob = SWIG_Guile_GetSmob(s);
  if (!SCM_NULLP(smob)) {
    if (SCM_SMOB_PREDICATE(swig_tag, smob) || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)) {
      SCM_SET_CELL_TYPE(smob, swig_destroyed_tag);
    }
    else scm_wrong_type_arg(NULL, 0, s);
  }
}

/* Init */

static int
print_swig_aux (SCM swig_smob, SCM port, scm_print_state *pstate, const char *attribute)
{
  swig_type_info *type;
  
  type = (swig_type_info *) SCM_CELL_WORD_2(swig_smob);
  if (type) {
    scm_puts((char *) "#<", port);
    scm_puts(attribute, port);
    scm_puts("swig-pointer ", port);
    if (type->str != NULL)
      scm_puts(type->str, port);
    else 
      scm_puts(type->name, port);
    scm_puts((char *) " ", port);
    scm_intprint((long) SCM_CELL_WORD_1(swig_smob), 16, port);
    scm_puts((char *) ">", port);
    /* non-zero means success */
    return 1;
  } else {
    return 0;
  }
}

  
static int
print_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "");
}

static int
print_collectable_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "collectable-");
}

static int
print_destroyed_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "destroyed-");
}

static SCM
equalp_swig (SCM A, SCM B)
{
  if (SCM_CELL_WORD_0(A) == SCM_CELL_WORD_0(B) && SCM_CELL_WORD_1(A) == SCM_CELL_WORD_1(B) 
      && SCM_CELL_WORD_2(A) == SCM_CELL_WORD_2(B))
    return SCM_BOOL_T;
  else return SCM_BOOL_F;
}

static size_t
free_swig(SCM A)
{
  swig_type_info *type = (swig_type_info *) SCM_CELL_WORD_2(A);
  if (type) {
    if (type->clientdata)
      ((swig_guile_clientdata *)type->clientdata)->destroy(A);
  } 
  return 0;
}

SWIGRUNTIME(void)
SWIG_Guile_Init ()
{
  if (!swig_tag) {
    swig_tag = scm_make_smob_type((char*)"swig-pointer", 0);
    scm_set_smob_print(swig_tag, print_swig);
    scm_set_smob_equalp(swig_tag, equalp_swig);
  }

  if (!swig_collectable_tag) {
    swig_collectable_tag = scm_make_smob_type((char*)"collectable-swig-pointer", 0);
    scm_set_smob_print(swig_collectable_tag, print_collectable_swig);
    scm_set_smob_equalp(swig_collectable_tag, equalp_swig);
    scm_set_smob_free(swig_collectable_tag, free_swig);
  }

  if (!swig_destroyed_tag) {
    swig_destroyed_tag = scm_make_smob_type((char*)"destroyed-swig-pointer", 0);
    scm_set_smob_print(swig_destroyed_tag, print_destroyed_swig);
    scm_set_smob_equalp(swig_destroyed_tag, equalp_swig);
  }
      
  swig_make_func = scm_permanent_object(
  scm_variable_ref(scm_c_module_lookup(scm_c_resolve_module("oop goops"), "make")));
  swig_keyword = scm_permanent_object(scm_c_make_keyword((char*) "init-smob"));
  swig_symbol = scm_permanent_object(scm_str2symbol("swig-smob"));
}

SWIGRUNTIME(int)
SWIG_Guile_GetArgs (SCM *dest, SCM rest,
		    int reqargs, int optargs,
		    const char *procname)
{
  int i;
  int num_args_passed = 0;
  for (i = 0; i<reqargs; i++) {
    if (!SCM_CONSP(rest))
      scm_wrong_num_args(scm_makfrom0str((char *) procname));
    *dest++ = SCM_CAR(rest);
    rest = SCM_CDR(rest);
    num_args_passed++;
  }
  for (i = 0; i<optargs && SCM_CONSP(rest); i++) {
    *dest++ = SCM_CAR(rest);
    rest = SCM_CDR(rest);
    num_args_passed++;
  }
  for (; i<optargs; i++)
    *dest++ = SCM_UNDEFINED;
  if (!SCM_NULLP(rest))
    scm_wrong_num_args(scm_makfrom0str((char *) procname));
  return num_args_passed;
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME(void) 
SWIG_Guile_PropagateClientData(swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientData(tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

#endif

#ifdef __cplusplus
}
#endif



#define GUILE_MAYBE_VALUES \
      if (gswig_list_p) gswig_result = scm_values(gswig_result);

#define GUILE_MAYBE_VECTOR \
      if (gswig_list_p) gswig_result = scm_vector(gswig_result);

#define SWIG_APPEND_VALUE(object)						\
    if (gswig_result == SCM_UNSPECIFIED)						\
        gswig_result = object;							\
    else {									\
      if (!gswig_list_p) {							\
	      gswig_list_p = 1;							\
	      gswig_result = scm_listify(gswig_result, object, SCM_UNDEFINED);	\
      }									\
      else									\
            gswig_result = scm_append(scm_listify(gswig_result, scm_listify(object, SCM_UNDEFINED), SCM_UNDEFINED));		\
    }
    /* used by Lib/exception.i */
    #define gh_symbol2scm scm_str2symbol
    /* useb by Lib/cdata.i */
    #define gh_str2scm scm_mem2string


static swig_guile_clientdata _swig_guile_clientdataqnet = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatamainwin = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatachatsession = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataface = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatapattern = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatablock_pattern = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatafont_lock = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatachat_page = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdatamain_chat_page = { NULL, SCM_EOL };

/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_QStringList swig_types[0] 
#define  SWIGTYPE_p_Pattern swig_types[1] 
#define  SWIGTYPE_p_BlockPattern swig_types[2] 
#define  SWIGTYPE_p_ChatPage swig_types[3] 
#define  SWIGTYPE_p_MainChatPage swig_types[4] 
#define  SWIGTYPE_p_Page swig_types[5] 
#define  SWIGTYPE_p_MainWin swig_types[6] 
#define  SWIGTYPE_p_Face swig_types[7] 
#define  SWIGTYPE_p_QMtp swig_types[8] 
#define  SWIGTYPE_p_ChatSession swig_types[9] 
#define  SWIGTYPE_p_QWidget swig_types[10] 
#define  SWIGTYPE_p_FontLock swig_types[11] 
static swig_type_info *swig_types[13];

/* -------- TYPES TABLE (END) -------- */


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


  static void SWIG_exception_ (int code, const char *msg,
                               const char *subr) {
#define ERROR(scmerr)					\
	scm_error(gh_symbol2scm((char *) (scmerr)),	\
		  (char *) subr, (char *) msg,		\
		  SCM_EOL, SCM_BOOL_F)
#define MAP(swigerr, scmerr)			\
	case swigerr:				\
	  ERROR(scmerr);			\
	  break
    switch (code) {
      MAP(SWIG_MemoryError,	"swig-memory-error");
      MAP(SWIG_IOError,		"swig-io-error");
      MAP(SWIG_RuntimeError,	"swig-runtime-error");
      MAP(SWIG_IndexError,	"swig-index-error");
      MAP(SWIG_TypeError,	"swig-type-error");
      MAP(SWIG_DivisionByZero,	"swig-division-by-zero");
      MAP(SWIG_OverflowError,	"swig-overflow-error");
      MAP(SWIG_SyntaxError,	"swig-syntax-error");
      MAP(SWIG_ValueError,	"swig-value-error");
      MAP(SWIG_SystemError,	"swig-system-error");
    default:
      ERROR("swig-error");
    }
#undef ERROR
#undef MAP
  }

#define SWIG_exception(a,b) SWIG_exception_(a, b, FUNC_NAME)


#include <string>


#include "qnet.h"


#include "mainwin.h"

extern MainWin *main_window;

#include "ChatSession.h"


#include "fontlock.h"


#include "chatpage.h"


#include "MainChatPage.h"

static SCM
_wrap_qnet_load_config_file (SCM s_0)
{
#define FUNC_NAME "qnet-load-config-file"
    QMtp *arg1 = (QMtp *) 0 ;
    bool result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    result = (bool)(arg1)->loadConfigFile();
    
    {
        gswig_result = SCM_BOOL(result);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_save_config_file (SCM s_0)
{
#define FUNC_NAME "qnet-save-config-file"
    QMtp *arg1 = (QMtp *) 0 ;
    bool result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    result = (bool)(arg1)->saveConfigFile();
    
    {
        gswig_result = SCM_BOOL(result);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_get_new_page (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "qnet-get-new-page"
    QMtp *arg1 = (QMtp *) 0 ;
    QString *arg2 = 0 ;
    QString *arg3 = 0 ;
    ChatSession *arg4 = (ChatSession *) 0 ;
    bool arg5 = (bool) true ;
    Page *result;
    QString temp2 ;
    char *tempptr2 ;
    QString temp3 ;
    char *tempptr3 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    {
        if (SCM_STRINGP(s_1)) {
            tempptr2 = SWIG_scm2str(s_1);
            temp2 = QString(tempptr2);
            if (tempptr2) SWIG_free(tempptr2);
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (SCM_STRINGP(s_2)) {
            tempptr3 = SWIG_scm2str(s_2);
            temp3 = QString(tempptr3);
            if (tempptr3) SWIG_free(tempptr3);
            arg3 = &temp3;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        arg4 = (ChatSession *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_ChatSession, 4, 0);
    }
    if (s_4 != SCM_UNDEFINED) {
        {
            arg5 = SCM_NFALSEP(s_4);
        }
    }
    result = (Page *)(arg1)->getNewPage((QString const &)*arg2,(QString const &)*arg3,arg4,arg5);
    
    {
        gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Page, 0);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_configure (SCM s_0)
{
#define FUNC_NAME "qnet-configure"
    QMtp *arg1 = (QMtp *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    (arg1)->slotConfigure();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_store_config (SCM s_0)
{
#define FUNC_NAME "qnet-store-config"
    QMtp *arg1 = (QMtp *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    (arg1)->slotStoreConfig();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_open (SCM s_0)
{
#define FUNC_NAME "qnet-open"
    QMtp *arg1 = (QMtp *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    (arg1)->fileNew();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_save (SCM s_0)
{
#define FUNC_NAME "qnet-save"
    QMtp *arg1 = (QMtp *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    (arg1)->fileSaveAs();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_exit (SCM s_0)
{
#define FUNC_NAME "qnet-exit"
    QMtp *arg1 = (QMtp *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    (arg1)->fileExit();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_close_current_tab (SCM s_0)
{
#define FUNC_NAME "qnet-close-current-tab"
    QMtp *arg1 = (QMtp *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    (arg1)->closeCurrentTab();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_close_tab (SCM s_0, SCM s_1)
{
#define FUNC_NAME "qnet-close-tab"
    QMtp *arg1 = (QMtp *) 0 ;
    QWidget *arg2 = (QWidget *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    {
        arg2 = (QWidget *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_QWidget, 2, 0);
    }
    (arg1)->closeTab(arg2);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_load_plugin (SCM s_0, SCM s_1)
{
#define FUNC_NAME "qnet-load-plugin"
    QMtp *arg1 = (QMtp *) 0 ;
    QString *arg2 = 0 ;
    bool result;
    QString temp2 ;
    char *tempptr2 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    {
        if (SCM_STRINGP(s_1)) {
            tempptr2 = SWIG_scm2str(s_1);
            temp2 = QString(tempptr2);
            if (tempptr2) SWIG_free(tempptr2);
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->loadPlugin((QString const &)*arg2);
    
    {
        gswig_result = SCM_BOOL(result);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_unload_plugin (SCM s_0, SCM s_1)
{
#define FUNC_NAME "qnet-unload-plugin"
    QMtp *arg1 = (QMtp *) 0 ;
    QString *arg2 = 0 ;
    bool result;
    QString temp2 ;
    char *tempptr2 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    {
        if (SCM_STRINGP(s_1)) {
            tempptr2 = SWIG_scm2str(s_1);
            temp2 = QString(tempptr2);
            if (tempptr2) SWIG_free(tempptr2);
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (bool)(arg1)->unloadPlugin((QString const &)*arg2);
    
    {
        gswig_result = SCM_BOOL(result);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_refresh_menu (SCM s_0)
{
#define FUNC_NAME "qnet-refresh-menu"
    QMtp *arg1 = (QMtp *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    (arg1)->refreshMenu();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_load_stylesheet (SCM s_0)
{
#define FUNC_NAME "qnet-load-stylesheet"
    QMtp *arg1 = (QMtp *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    (arg1)->loadStyleSheet();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_launch_session (SCM s_0, SCM s_1)
{
#define FUNC_NAME "qnet-launch-session"
    QMtp *arg1 = (QMtp *) 0 ;
    QString *arg2 = 0 ;
    QString temp2 ;
    char *tempptr2 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    {
        if (SCM_STRINGP(s_1)) {
            tempptr2 = SWIG_scm2str(s_1);
            temp2 = QString(tempptr2);
            if (tempptr2) SWIG_free(tempptr2);
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->launchSession((QString const &)*arg2);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_load_plugins (SCM s_0)
{
#define FUNC_NAME "qnet-load-plugins"
    QMtp *arg1 = (QMtp *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    (arg1)->loadPlugins();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_unload_plugins (SCM s_0)
{
#define FUNC_NAME "qnet-unload-plugins"
    QMtp *arg1 = (QMtp *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    (arg1)->unloadPlugins();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_reload_plugins (SCM s_0, SCM s_1)
{
#define FUNC_NAME "qnet-reload-plugins"
    QMtp *arg1 = (QMtp *) 0 ;
    QStringList *arg2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    {
        arg2 = (QStringList *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_QStringList, 2, 0);
    }
    (arg1)->reloadPlugins((QStringList const &)*arg2);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_sessions_number (SCM s_0)
{
#define FUNC_NAME "qnet-sessions-number"
    QMtp *arg1 = (QMtp *) 0 ;
    int result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    result = (int)(arg1)->sessionsNumber();
    
    {
        gswig_result = scm_long2num(result);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_qnet_session (SCM s_0, SCM s_1)
{
#define FUNC_NAME "qnet-session"
    QMtp *arg1 = (QMtp *) 0 ;
    int arg2 ;
    ChatSession *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    {
        arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
    }
    result = (ChatSession *)(arg1)->session(arg2);
    
    {
        gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_ChatSession, 0);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_qnet ()
{
#define FUNC_NAME "new-qnet"
    QMtp *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    result = (QMtp *)new QMtp();
    
    {
        gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_QMtp, 1);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_qnet (SCM s_0)
{
#define FUNC_NAME "delete-qnet"
    QMtp *arg1 = (QMtp *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (QMtp *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_QMtp, 1, 0);
    }
    delete arg1;
    
    gswig_result = SCM_UNSPECIFIED;
    SWIG_Guile_MarkPointerDestroyed(s_0);
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mainwin_set_use_dock (SCM s_0)
{
#define FUNC_NAME "mainwin-set-use-dock"
    MainWin *arg1 = (MainWin *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (MainWin *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_MainWin, 1, 0);
    }
    (arg1)->setUseDock();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_mainwin_qmtp (SCM s_0)
{
#define FUNC_NAME "mainwin-qmtp"
    MainWin *arg1 = (MainWin *) 0 ;
    QMtp *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (MainWin *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_MainWin, 1, 0);
    }
    result = (QMtp *)(arg1)->qmtp();
    
    {
        gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_QMtp, 0);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_main_window(SCM s_0)
{
#define FUNC_NAME "main-window"
    SCM gswig_result;
    
    if (s_0 != SCM_UNDEFINED) {
        {
            main_window = (MainWin *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_MainWin, 1, 0);
        }
    }
    {
        gswig_result = SWIG_NewPointerObj (main_window, SWIGTYPE_p_MainWin, 0);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_display_err (SCM s_0, SCM s_1)
{
#define FUNC_NAME "chatsession-display-err"
    ChatSession *arg1 = (ChatSession *) 0 ;
    QString *arg2 = 0 ;
    QString temp2 ;
    char *tempptr2 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    {
        if (SCM_STRINGP(s_1)) {
            tempptr2 = SWIG_scm2str(s_1);
            temp2 = QString(tempptr2);
            if (tempptr2) SWIG_free(tempptr2);
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->displayStderr((QString const &)*arg2);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_display_out (SCM s_0, SCM s_1)
{
#define FUNC_NAME "chatsession-display-out"
    ChatSession *arg1 = (ChatSession *) 0 ;
    QString *arg2 = 0 ;
    QString temp2 ;
    char *tempptr2 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    {
        if (SCM_STRINGP(s_1)) {
            tempptr2 = SWIG_scm2str(s_1);
            temp2 = QString(tempptr2);
            if (tempptr2) SWIG_free(tempptr2);
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->displayStdout((QString const &)*arg2);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_session_name (SCM s_0)
{
#define FUNC_NAME "chatsession-session-name"
    ChatSession *arg1 = (ChatSession *) 0 ;
    QString *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    {
        QString const &_result_ref = ((ChatSession const *)arg1)->sessionName();
        result = (QString *) &_result_ref;
    }
    
    {
        gswig_result = scm_makfrom0str((result)->ascii());
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_update_filters (SCM s_0)
{
#define FUNC_NAME "chatsession-update-filters"
    ChatSession *arg1 = (ChatSession *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    (arg1)->updateFilters();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_chatpage (SCM s_0)
{
#define FUNC_NAME "chatsession-chatpage"
    ChatSession *arg1 = (ChatSession *) 0 ;
    MainChatPage *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    result = (MainChatPage *)(arg1)->chatpage();
    
    {
        gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_MainChatPage, 0);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_logged_p (SCM s_0)
{
#define FUNC_NAME "chatsession-logged-p"
    ChatSession *arg1 = (ChatSession *) 0 ;
    bool result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    result = (bool)(arg1)->isLogged();
    
    {
        gswig_result = SCM_BOOL(result);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_close_session (SCM s_0)
{
#define FUNC_NAME "chatsession-close-session"
    ChatSession *arg1 = (ChatSession *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    (arg1)->closeSession();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_link_clicked (SCM s_0, SCM s_1)
{
#define FUNC_NAME "chatsession-link-clicked"
    ChatSession *arg1 = (ChatSession *) 0 ;
    QString *arg2 = 0 ;
    QString temp2 ;
    char *tempptr2 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    {
        if (SCM_STRINGP(s_1)) {
            tempptr2 = SWIG_scm2str(s_1);
            temp2 = QString(tempptr2);
            if (tempptr2) SWIG_free(tempptr2);
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->slotLinkClicked((QString const &)*arg2);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_reconnect (SCM s_0)
{
#define FUNC_NAME "chatsession-reconnect"
    ChatSession *arg1 = (ChatSession *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    (arg1)->slotReconnect();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_kill (SCM s_0, SCM s_1)
{
#define FUNC_NAME "chatsession-kill"
    ChatSession *arg1 = (ChatSession *) 0 ;
    Page *arg2 = (Page *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    {
        arg2 = (Page *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_Page, 2, 0);
    }
    (arg1)->kill(arg2);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_send (SCM s_0, SCM s_1)
{
#define FUNC_NAME "chatsession-send"
    ChatSession *arg1 = (ChatSession *) 0 ;
    QString *arg2 = 0 ;
    QString temp2 ;
    char *tempptr2 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    {
        if (SCM_STRINGP(s_1)) {
            tempptr2 = SWIG_scm2str(s_1);
            temp2 = QString(tempptr2);
            if (tempptr2) SWIG_free(tempptr2);
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->send((QString const &)*arg2);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_incoming (SCM s_0, SCM s_1)
{
#define FUNC_NAME "chatsession-incoming"
    ChatSession *arg1 = (ChatSession *) 0 ;
    QString *arg2 = 0 ;
    QString temp2 ;
    char *tempptr2 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    {
        if (SCM_STRINGP(s_1)) {
            tempptr2 = SWIG_scm2str(s_1);
            temp2 = QString(tempptr2);
            if (tempptr2) SWIG_free(tempptr2);
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->incoming((QString const &)*arg2);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chatsession_outgoing (SCM s_0, SCM s_1)
{
#define FUNC_NAME "chatsession-outgoing"
    ChatSession *arg1 = (ChatSession *) 0 ;
    QString *arg2 = 0 ;
    QString temp2 ;
    char *tempptr2 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatSession *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatSession, 1, 0);
    }
    {
        if (SCM_STRINGP(s_1)) {
            tempptr2 = SWIG_scm2str(s_1);
            temp2 = QString(tempptr2);
            if (tempptr2) SWIG_free(tempptr2);
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->outgoing((QString const &)*arg2);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_face (SCM s_0, SCM s_1)
{
#define FUNC_NAME "new-face"
    QString *arg1 = 0 ;
    QString *arg2 = 0 ;
    Face *result;
    QString temp1 ;
    char *tempptr1 ;
    QString temp2 ;
    char *tempptr2 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SCM_STRINGP(s_0)) {
            tempptr1 = SWIG_scm2str(s_0);
            temp1 = QString(tempptr1);
            if (tempptr1) SWIG_free(tempptr1);
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (SCM_STRINGP(s_1)) {
            tempptr2 = SWIG_scm2str(s_1);
            temp2 = QString(tempptr2);
            if (tempptr2) SWIG_free(tempptr2);
            arg2 = &temp2;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (Face *)new Face((QString const &)*arg1,(QString const &)*arg2);
    
    {
        gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Face, 1);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_pattern (SCM s_0)
{
#define FUNC_NAME "new-pattern"
    QString *arg1 = 0 ;
    Pattern *result;
    QString temp1 ;
    char *tempptr1 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SCM_STRINGP(s_0)) {
            tempptr1 = SWIG_scm2str(s_0);
            temp1 = QString(tempptr1);
            if (tempptr1) SWIG_free(tempptr1);
            arg1 = &temp1;
        } else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (Pattern *)new Pattern((QString const &)*arg1);
    
    {
        gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Pattern, 1);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_pattern_add (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "pattern-add"
    Pattern *arg1 = (Pattern *) 0 ;
    int arg2 ;
    SwigValueWrapper< Face > arg3 ;
    Face *argp3 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (Pattern *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Pattern, 1, 0);
    }
    {
        arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
    }
    {
        argp3 = (Face *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Face, 3, 0);
        arg3 = *argp3;
    }
    (arg1)->add(arg2,arg3);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_block_pattern (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "new-block-pattern"
    Pattern *arg1 = 0 ;
    Pattern *arg2 = 0 ;
    Pattern *arg3 = 0 ;
    BlockPattern *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (Pattern *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Pattern, 1, 0);
    }
    {
        arg2 = (Pattern *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_Pattern, 2, 0);
    }
    {
        arg3 = (Pattern *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Pattern, 3, 0);
    }
    result = (BlockPattern *)new BlockPattern((Pattern const &)*arg1,(Pattern const &)*arg2,(Pattern const &)*arg3);
    
    {
        gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_BlockPattern, 1);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_font_lock_add_pattern (SCM s_0, SCM s_1)
{
#define FUNC_NAME "font-lock-add-pattern"
    FontLock *arg1 = (FontLock *) 0 ;
    Pattern *arg2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (FontLock *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_FontLock, 1, 0);
    }
    {
        arg2 = (Pattern *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_Pattern, 2, 0);
    }
    (arg1)->addPattern((Pattern const &)*arg2);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_font_lock_add_multi_pattern (SCM s_0, SCM s_1)
{
#define FUNC_NAME "font-lock-add-multi-pattern"
    FontLock *arg1 = (FontLock *) 0 ;
    BlockPattern *arg2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (FontLock *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_FontLock, 1, 0);
    }
    {
        arg2 = (BlockPattern *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_BlockPattern, 2, 0);
    }
    (arg1)->addMultiLinePattern((BlockPattern const &)*arg2);
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_font_lock_clear (SCM s_0)
{
#define FUNC_NAME "font-lock-clear"
    FontLock *arg1 = (FontLock *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (FontLock *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_FontLock, 1, 0);
    }
    (arg1)->clear();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chat_page_toggle_user_box (SCM s_0)
{
#define FUNC_NAME "chat-page-toggle-user-box"
    ChatPage *arg1 = (ChatPage *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatPage *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatPage, 1, 0);
    }
    (arg1)->toggleUserBox();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_chat_page_font_lock (SCM s_0)
{
#define FUNC_NAME "chat-page-font-lock"
    ChatPage *arg1 = (ChatPage *) 0 ;
    FontLock *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (ChatPage *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_ChatPage, 1, 0);
    }
    result = (FontLock *)(arg1)->fontLock();
    
    {
        gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_FontLock, 0);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_main_chat_page_toggle_user_box (SCM s_0)
{
#define FUNC_NAME "main-chat-page-toggle-user-box"
    MainChatPage *arg1 = (MainChatPage *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (MainChatPage *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_MainChatPage, 1, 0);
    }
    (arg1)->toggleUserBox();
    
    gswig_result = SCM_UNSPECIFIED;
    
    return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_main_chat_page_font_lock (SCM s_0)
{
#define FUNC_NAME "main-chat-page-font-lock"
    MainChatPage *arg1 = (MainChatPage *) 0 ;
    FontLock *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = (MainChatPage *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_MainChatPage, 1, 0);
    }
    result = (FontLock *)(arg1)->fontLock();
    
    {
        gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_FontLock, 0);
    }
    
    return gswig_result;
#undef FUNC_NAME
}


#ifdef __cplusplus
extern "C" {
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_MainChatPageTo_p_ChatPage(void *x) {
    return (void *)((ChatPage *)  ((MainChatPage *) x));
}
static swig_type_info _swigt__p_QStringList[] = {{"_p_QStringList", 0, "QStringList *", 0},{"_p_QStringList"},{0}};
static swig_type_info _swigt__p_Pattern[] = {{"_p_Pattern", 0, "Pattern *", 0},{"_p_Pattern"},{0}};
static swig_type_info _swigt__p_BlockPattern[] = {{"_p_BlockPattern", 0, "BlockPattern *", 0},{"_p_BlockPattern"},{0}};
static swig_type_info _swigt__p_ChatPage[] = {{"_p_ChatPage", 0, "ChatPage *", 0},{"_p_ChatPage"},{"_p_MainChatPage", _p_MainChatPageTo_p_ChatPage},{0}};
static swig_type_info _swigt__p_MainChatPage[] = {{"_p_MainChatPage", 0, "MainChatPage *", 0},{"_p_MainChatPage"},{0}};
static swig_type_info _swigt__p_Page[] = {{"_p_Page", 0, "Page *", 0},{"_p_Page"},{0}};
static swig_type_info _swigt__p_MainWin[] = {{"_p_MainWin", 0, "MainWin *", 0},{"_p_MainWin"},{0}};
static swig_type_info _swigt__p_Face[] = {{"_p_Face", 0, "Face *", 0},{"_p_Face"},{0}};
static swig_type_info _swigt__p_QMtp[] = {{"_p_QMtp", 0, "QMtp *", 0},{"_p_QMtp"},{0}};
static swig_type_info _swigt__p_ChatSession[] = {{"_p_ChatSession", 0, "ChatSession *", 0},{"_p_ChatSession"},{0}};
static swig_type_info _swigt__p_QWidget[] = {{"_p_QWidget", 0, "QWidget *", 0},{"_p_QWidget"},{0}};
static swig_type_info _swigt__p_FontLock[] = {{"_p_FontLock", 0, "FontLock *", 0},{"_p_FontLock"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_QStringList, 
_swigt__p_Pattern, 
_swigt__p_BlockPattern, 
_swigt__p_ChatPage, 
_swigt__p_MainChatPage, 
_swigt__p_Page, 
_swigt__p_MainWin, 
_swigt__p_Face, 
_swigt__p_QMtp, 
_swigt__p_ChatSession, 
_swigt__p_QWidget, 
_swigt__p_FontLock, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

extern void
SWIG_init (void)
{
    static int _swig_init = 0;
    
    if (!_swig_init) {
        int i;
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        for (i = 0; swig_types_initial[i]; i++) {
            SWIG_PropagateClientData(swig_types[i]);
        }
        _swig_init = 1;
    }
    
    SWIG_Guile_Init();
    
    SWIG_TypeClientData(SWIGTYPE_p_QMtp, (void *) &_swig_guile_clientdataqnet);
    scm_c_define_gsubr("qnet-load-config-file", 1, 0, 0, (swig_guile_proc) _wrap_qnet_load_config_file);
    scm_c_define_gsubr("qnet-save-config-file", 1, 0, 0, (swig_guile_proc) _wrap_qnet_save_config_file);
    scm_c_define_gsubr("qnet-get-new-page", 4, 1, 0, (swig_guile_proc) _wrap_qnet_get_new_page);
    scm_c_define_gsubr("qnet-configure", 1, 0, 0, (swig_guile_proc) _wrap_qnet_configure);
    scm_c_define_gsubr("qnet-store-config", 1, 0, 0, (swig_guile_proc) _wrap_qnet_store_config);
    scm_c_define_gsubr("qnet-open", 1, 0, 0, (swig_guile_proc) _wrap_qnet_open);
    scm_c_define_gsubr("qnet-save", 1, 0, 0, (swig_guile_proc) _wrap_qnet_save);
    scm_c_define_gsubr("qnet-exit", 1, 0, 0, (swig_guile_proc) _wrap_qnet_exit);
    scm_c_define_gsubr("qnet-close-current-tab", 1, 0, 0, (swig_guile_proc) _wrap_qnet_close_current_tab);
    scm_c_define_gsubr("qnet-close-tab", 2, 0, 0, (swig_guile_proc) _wrap_qnet_close_tab);
    scm_c_define_gsubr("qnet-load-plugin", 2, 0, 0, (swig_guile_proc) _wrap_qnet_load_plugin);
    scm_c_define_gsubr("qnet-unload-plugin", 2, 0, 0, (swig_guile_proc) _wrap_qnet_unload_plugin);
    scm_c_define_gsubr("qnet-refresh-menu", 1, 0, 0, (swig_guile_proc) _wrap_qnet_refresh_menu);
    scm_c_define_gsubr("qnet-load-stylesheet", 1, 0, 0, (swig_guile_proc) _wrap_qnet_load_stylesheet);
    scm_c_define_gsubr("qnet-launch-session", 2, 0, 0, (swig_guile_proc) _wrap_qnet_launch_session);
    scm_c_define_gsubr("qnet-load-plugins", 1, 0, 0, (swig_guile_proc) _wrap_qnet_load_plugins);
    scm_c_define_gsubr("qnet-unload-plugins", 1, 0, 0, (swig_guile_proc) _wrap_qnet_unload_plugins);
    scm_c_define_gsubr("qnet-reload-plugins", 2, 0, 0, (swig_guile_proc) _wrap_qnet_reload_plugins);
    scm_c_define_gsubr("qnet-sessions-number", 1, 0, 0, (swig_guile_proc) _wrap_qnet_sessions_number);
    scm_c_define_gsubr("qnet-session", 2, 0, 0, (swig_guile_proc) _wrap_qnet_session);
    scm_c_define_gsubr("new-qnet", 0, 0, 0, (swig_guile_proc) _wrap_new_qnet);
    ((swig_guile_clientdata *)(SWIGTYPE_p_QMtp->clientdata))->destroy = (guile_destructor) _wrap_delete_qnet;
    scm_c_define_gsubr("delete-qnet", 1, 0, 0, (swig_guile_proc) _wrap_delete_qnet);
    SWIG_TypeClientData(SWIGTYPE_p_MainWin, (void *) &_swig_guile_clientdatamainwin);
    scm_c_define_gsubr("mainwin-set-use-dock", 1, 0, 0, (swig_guile_proc) _wrap_mainwin_set_use_dock);
    scm_c_define_gsubr("mainwin-qmtp", 1, 0, 0, (swig_guile_proc) _wrap_mainwin_qmtp);
    scm_c_define_gsubr("main-window", 0, 1, 0, (swig_guile_proc) _wrap_main_window);
    SWIG_TypeClientData(SWIGTYPE_p_ChatSession, (void *) &_swig_guile_clientdatachatsession);
    scm_c_define_gsubr("chatsession-display-err", 2, 0, 0, (swig_guile_proc) _wrap_chatsession_display_err);
    scm_c_define_gsubr("chatsession-display-out", 2, 0, 0, (swig_guile_proc) _wrap_chatsession_display_out);
    scm_c_define_gsubr("chatsession-session-name", 1, 0, 0, (swig_guile_proc) _wrap_chatsession_session_name);
    scm_c_define_gsubr("chatsession-update-filters", 1, 0, 0, (swig_guile_proc) _wrap_chatsession_update_filters);
    scm_c_define_gsubr("chatsession-chatpage", 1, 0, 0, (swig_guile_proc) _wrap_chatsession_chatpage);
    scm_c_define_gsubr("chatsession-logged-p", 1, 0, 0, (swig_guile_proc) _wrap_chatsession_logged_p);
    scm_c_define_gsubr("chatsession-close-session", 1, 0, 0, (swig_guile_proc) _wrap_chatsession_close_session);
    scm_c_define_gsubr("chatsession-link-clicked", 2, 0, 0, (swig_guile_proc) _wrap_chatsession_link_clicked);
    scm_c_define_gsubr("chatsession-reconnect", 1, 0, 0, (swig_guile_proc) _wrap_chatsession_reconnect);
    scm_c_define_gsubr("chatsession-kill", 2, 0, 0, (swig_guile_proc) _wrap_chatsession_kill);
    scm_c_define_gsubr("chatsession-send", 2, 0, 0, (swig_guile_proc) _wrap_chatsession_send);
    scm_c_define_gsubr("chatsession-incoming", 2, 0, 0, (swig_guile_proc) _wrap_chatsession_incoming);
    scm_c_define_gsubr("chatsession-outgoing", 2, 0, 0, (swig_guile_proc) _wrap_chatsession_outgoing);
    SWIG_TypeClientData(SWIGTYPE_p_Face, (void *) &_swig_guile_clientdataface);
    scm_c_define_gsubr("new-face", 2, 0, 0, (swig_guile_proc) _wrap_new_face);
    SWIG_TypeClientData(SWIGTYPE_p_Pattern, (void *) &_swig_guile_clientdatapattern);
    scm_c_define_gsubr("new-pattern", 1, 0, 0, (swig_guile_proc) _wrap_new_pattern);
    scm_c_define_gsubr("pattern-add", 3, 0, 0, (swig_guile_proc) _wrap_pattern_add);
    SWIG_TypeClientData(SWIGTYPE_p_BlockPattern, (void *) &_swig_guile_clientdatablock_pattern);
    scm_c_define_gsubr("new-block-pattern", 3, 0, 0, (swig_guile_proc) _wrap_new_block_pattern);
    SWIG_TypeClientData(SWIGTYPE_p_FontLock, (void *) &_swig_guile_clientdatafont_lock);
    scm_c_define_gsubr("font-lock-add-pattern", 2, 0, 0, (swig_guile_proc) _wrap_font_lock_add_pattern);
    scm_c_define_gsubr("font-lock-add-multi-pattern", 2, 0, 0, (swig_guile_proc) _wrap_font_lock_add_multi_pattern);
    scm_c_define_gsubr("font-lock-clear", 1, 0, 0, (swig_guile_proc) _wrap_font_lock_clear);
    SWIG_TypeClientData(SWIGTYPE_p_ChatPage, (void *) &_swig_guile_clientdatachat_page);
    scm_c_define_gsubr("chat-page-toggle-user-box", 1, 0, 0, (swig_guile_proc) _wrap_chat_page_toggle_user_box);
    scm_c_define_gsubr("chat-page-font-lock", 1, 0, 0, (swig_guile_proc) _wrap_chat_page_font_lock);
    SWIG_TypeClientData(SWIGTYPE_p_MainChatPage, (void *) &_swig_guile_clientdatamain_chat_page);
    scm_c_define_gsubr("main-chat-page-toggle-user-box", 1, 0, 0, (swig_guile_proc) _wrap_main_chat_page_toggle_user_box);
    scm_c_define_gsubr("main-chat-page-font-lock", 1, 0, 0, (swig_guile_proc) _wrap_main_chat_page_font_lock);
}

#ifdef __cplusplus
}
#endif
extern "C" {
/* Linkage: simple */

}

